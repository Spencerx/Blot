const mustache = require("mustache");
const config = require("config");
const fs = require("fs-extra");
const child_process = require("child_process");

const NODE_SERVER_IP = process.env.NODE_SERVER_IP;
const REDIS_IP = process.env.REDIS_IP;
const PUBLIC_IP = process.env.PUBLIC_IP;

if (!NODE_SERVER_IP) throw new Error("NODE_SERVER_IP not set");
if (!REDIS_IP) throw new Error("REDIS_IP not set");
if (!PUBLIC_IP) throw new Error("PUBLIC_IP not set");

const OUTPUT = __dirname + "/data/latest";
const PREVIOUS = OUTPUT + "-previous-" + Date.now();
const CONFIG_DIRECTORY = __dirname + "/conf";

const template = fs.readFileSync(`${CONFIG_DIRECTORY}/server.conf`, "utf8");
const partials = {};

// remote config directory
const config_directory =
  process.env.OPENRESTY_CONFIG_DIRECTORY || "/home/ec2-user/openresty";

const locals = {
  blot_directory: config.blot_directory,
  // development: config.environment === "development",
  host: "blot.im",
  disable_http2: process.env.DISABLE_HTTP2,
  node_ip: NODE_SERVER_IP,
  node_port: config.port,

  // used by the node application container running inside docker
  // to communicate with the openresty cache purge endpoint on localhost
  openresty_instance_private_ip: process.env.OPENRESTY_INSTANCE_PRIVATE_IP,

  lua_package_path: process.env.LUA_PACKAGE_PATH,
  redis: { host: REDIS_IP },
  reverse_proxy_ip: PUBLIC_IP,
  server_label: !PUBLIC_IP
    ? ""
    : PUBLIC_IP.startsWith("18.")
    ? "eu"
    : "us",
  user: process.env.OPENRESTY_USER || "ec2-user",
  log_directory:
    process.env.OPENRESTY_LOG_DIRECTORY || "/var/instance-ssd/logs",
  config_directory,
  // if you change the cache directory, you must also update the
  // script mount-instance-store.sh
  cache_directory:
    process.env.OPENRESTY_CACHE_DIRECTORY || "/var/instance-ssd/cache",
  ssl_certificate:
    process.env.SSL_CERTIFICATE || "/etc/ssl/private/letsencrypt-domain.pem",
  ssl_certificate_key:
    process.env.SSL_CERTIFICATE_KEY || "/etc/ssl/private/letsencrypt-domain.key"
};

// move the previous contents of the data directory to a backup
// so we can compare the new contents with the old
fs.moveSync(OUTPUT, PREVIOUS, { overwrite: true });

fs.emptyDirSync(OUTPUT);

fs.copySync(`${__dirname}/html`, `${OUTPUT}/html`);

fs.readdirSync(CONFIG_DIRECTORY).forEach(file => {
  // copy lua files to data directory so they are available to nginx
  if (file.endsWith(".lua")) {
    fs.copySync(CONFIG_DIRECTORY + "/" + file, OUTPUT + "/" + file);
  }

  if (!file.endsWith(".conf")) return;

  partials[file] = fs.readFileSync(CONFIG_DIRECTORY + "/" + file, "utf8");
});

const warning = `

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!   WARNING                                   !!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Do not edit this file directly

# This file was generated by ../build.js
# Please update the source files in ./conf and run ../build.js

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!   WARNING                                   !!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

`;

const result = mustache.render(template, locals, partials);

fs.outputFileSync(OUTPUT + "/openresty.conf", warning + result);
// compare the new contents with the old
const diff = child_process.spawnSync("/opt/homebrew/bin/diff", ['--color', "-r", '-c', OUTPUT, PREVIOUS], { stdio: 'inherit' });

if (diff.error) console.error(diff.error);

// ask the user to confirm the changes
// if y, exit with success
// if n, restore the previous contents to the OUTPUT directory
// and remove the PREVIOUS directory
// if anything else, ask the user to confirm again

const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = () => {
  rl.question("Do you want to keep these changes? [y/n] ", answer => {
    if (answer === "y") {
      console.log("Changes kept. Build complete");
      rl.close();
    } else if (answer === "n") {
      console.log("Changes discarded");
      fs.removeSync(OUTPUT);
      fs.moveSync(PREVIOUS, OUTPUT);
      fs.removeSync(PREVIOUS);
      console.log("Done");
      rl.close();
    } else {
      console.log("Please answer 'y' or 'n'");
      question();
    }
  });
};

