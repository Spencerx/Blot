name: ci

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  # ┌────────────────────┐
  # │ 1) Build & Test    │
  # └────────────────────┘
  test:
    name: Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 300

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Test Image (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true              # So we can docker run the image locally
          cache-from: type=gha,scope=blot-docker-cache
          cache-to: type=gha,mode=max,scope=blot-docker-cache
          target: test
          # Tagged purely for local usage in this job; no push.
          tags: ghcr.io/${{ github.repository_owner }}/blot:test-${{ github.sha }}

      - name: Run Tests
        env:
          BLOT_STRIPE_KEY: ${{ secrets.BLOT_STRIPE_KEY }}
          BLOT_STRIPE_SECRET: ${{ secrets.BLOT_STRIPE_SECRET }}
          BLOT_STRIPE_PRODUCT: ${{ secrets.BLOT_STRIPE_PRODUCT }}
        run: |
          docker run --rm \
            --network name=${{ job.services.redis.network }} \
            -e BLOT_REDIS_HOST=redis \
            -e BLOT_STRIPE_KEY=$BLOT_STRIPE_KEY \
            -e BLOT_STRIPE_SECRET=$BLOT_STRIPE_SECRET \
            -e BLOT_STRIPE_PRODUCT=$BLOT_STRIPE_PRODUCT \
            ghcr.io/${{ github.repository_owner }}/blot:test-${{ github.sha }} \
            sh -c "node tests && npx depcheck --ignores=depcheck,nodemon,blessed-contrib,twit,fontkit,text-to-svg --skip-missing"

  # ┌────────────────────────────────────┐
  # │ 2) Build Production Images       │
  # │    (in parallel with tests)      │
  # └────────────────────────────────────┘
  build:
    name: Build Production Images (Ephemeral Tags)
    runs-on: ubuntu-latest
    # This job does NOT depend on "test", so it can run in parallel.
    # However, it won't "promote/publish" until tests pass (see last job).

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 300

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build multi-arch production image (temp)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: prod
          # Ephemeral tag for this combined multi-arch build
          tags: ghcr.io/${{ github.repository_owner }}/blot:temp-${{ github.sha }}
          cache-from: type=gha,scope=blot-docker-cache
          cache-to: type=gha,mode=max,scope=blot-docker-cache

  # ┌──────────────────────────────────────────────────┐
  # │ 3) Promote If Tests Pass (Re-tag + Push Final)  │
  # └──────────────────────────────────────────────────┘
  promote:
    name: Promote If Tests Succeed
    runs-on: ubuntu-latest
    needs: 
      - build
      - test
    if: ${{ needs.build.result == 'success' && needs.test.result == 'success' }}

    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull ephemeral multi-arch image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/blot:temp-${{ github.sha }}

      - name: Promote multi-arch to final
        run: |
          # Re-tag ephemeral multi-arch image to "latest" + commit SHA
          docker tag ghcr.io/${{ github.repository_owner }}/blot:temp-${{ github.sha }} ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}
          docker tag ghcr.io/${{ github.repository_owner }}/blot:temp-${{ github.sha }} ghcr.io/${{ github.repository_owner }}/blot:latest

          # Push final tags
          docker push ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/blot:latest